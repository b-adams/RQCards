// Generated by CoffeeScript 1.6.3
(function() {
  describe('Playmat', function() {
    var sut;
    sut = null;
    beforeEach(function() {
      return sut = new PlayMat();
    });
    afterEach(function() {
      return sut = null;
    });
    describe('Toggling', function() {
      describe('Feature', function() {
        var cellType;
        cellType = TYPE_FEATURE;
        it('starts inactive', function() {
          var result;
          result = sut.isCellActive(cellType, 1);
          return expect(result).toBeFalsy();
        });
        it('calls setCell when toggling', function() {
          spyOn(sut, "setCell");
          sut.toggleCell(cellType, 2);
          return expect(sut.setCell).toHaveBeenCalled;
        });
        it('can be toggled on', function() {
          var result;
          sut.toggleCell(cellType, 3);
          result = sut.isCellActive(cellType, 3);
          return expect(result).toBeTruthy();
        });
        it('can be toggled on and back off', function() {
          var result;
          sut.toggleCell(cellType, 4);
          sut.toggleCell(cellType, 4);
          result = sut.isCellActive(cellType, 4);
          return expect(result).toBeFalsy();
        });
        return it('does not confuse different slots', function() {
          var result;
          sut.toggleCell(cellType, 5);
          sut.toggleCell(cellType, 6);
          result = sut.isCellActive(cellType, 5);
          return expect(result).toBeTruthy();
        });
      });
      describe('Detector', function() {
        var cellType;
        cellType = TYPE_DETECTOR;
        it('starts inactive', function() {
          var result;
          result = sut.isCellActive(cellType, 1);
          return expect(result).toBeFalsy();
        });
        it('calls setCell when toggling', function() {
          spyOn(sut, "setCell");
          sut.toggleCell(cellType, 2);
          return expect(sut.setCell).toHaveBeenCalled;
        });
        it('can be toggled on', function() {
          var result;
          sut.toggleCell(cellType, 3);
          result = sut.isCellActive(cellType, 3);
          return expect(result).toBeTruthy();
        });
        it('can be toggled on and back off', function() {
          var result;
          sut.toggleCell(cellType, 4);
          sut.toggleCell(cellType, 4);
          result = sut.isCellActive(cellType, 4);
          return expect(result).toBeFalsy();
        });
        return it('does not confuse different slots', function() {
          var result;
          sut.toggleCell(cellType, 5);
          sut.toggleCell(cellType, 6);
          result = sut.isCellActive(cellType, 5);
          return expect(result).toBeTruthy();
        });
      });
      describe('Alarm', function() {
        var cellType;
        cellType = TYPE_ALARM;
        it('starts inactive', function() {
          var result;
          result = sut.isCellActive(cellType, 1, 0);
          return expect(result).toBeFalsy();
        });
        it('calls setCell when toggling', function() {
          spyOn(sut, "setCell");
          sut.toggleCell(cellType, 2, 1);
          return expect(sut.setCell).toHaveBeenCalled;
        });
        it('can be toggled on', function() {
          var result;
          sut.toggleCell(cellType, 3, 0);
          result = sut.isCellActive(cellType, 3, 0);
          return expect(result).toBeTruthy();
        });
        it('can be toggled on and back off', function() {
          var result;
          sut.toggleCell(cellType, 4, 1);
          sut.toggleCell(cellType, 4, 1);
          result = sut.isCellActive(cellType, 4, 1);
          return expect(result).toBeFalsy();
        });
        it('does not confuse different slots', function() {
          var result;
          sut.toggleCell(cellType, 5, 0);
          sut.toggleCell(cellType, 6, 0);
          result = sut.isCellActive(cellType, 5, 0);
          return expect(result).toBeTruthy();
        });
        return it('does not confuse different subslots', function() {
          var result;
          sut.toggleCell(TYPE_ALARM, 7, 0);
          sut.toggleCell(TYPE_ALARM, 7, 1);
          result = sut.isCellActive(TYPE_ALARM, 7, 0);
          return expect(result).toBeTruthy();
        });
      });
      return describe('Effector', function() {
        var cellType;
        cellType = TYPE_EFFECTOR;
        it('starts inactive', function() {
          var result;
          result = sut.isCellActive(cellType, 1, 0);
          return expect(result).toBeFalsy();
        });
        it('calls setCell when toggling', function() {
          spyOn(sut, "setCell");
          sut.toggleCell(cellType, 2, 1);
          return expect(sut.setCell).toHaveBeenCalled;
        });
        it('can be toggled on', function() {
          var result;
          sut.toggleCell(cellType, 3, 0);
          result = sut.isCellActive(cellType, 3, 0);
          return expect(result).toBeTruthy();
        });
        it('can be toggled on and back off', function() {
          var result;
          sut.toggleCell(cellType, 4, 1);
          sut.toggleCell(cellType, 4, 1);
          result = sut.isCellActive(cellType, 4, 1);
          return expect(result).toBeFalsy();
        });
        it('does not confuse different slots', function() {
          var result;
          sut.toggleCell(cellType, 5, 0);
          sut.toggleCell(cellType, 6, 0);
          result = sut.isCellActive(cellType, 5, 0);
          return expect(result).toBeTruthy();
        });
        return it('does not confuse different subslots', function() {
          var result;
          sut.toggleCell(TYPE_ALARM, 7, 0);
          sut.toggleCell(TYPE_ALARM, 7, 1);
          result = sut.isCellActive(TYPE_ALARM, 7, 0);
          return expect(result).toBeTruthy();
        });
      });
    });
    return describe('Board States', function() {
      describe('Initial', function() {
        it('has no active ETI', function() {
          return expect(sut.isPlantETIActive()).toBeFalsy();
        });
        it('has no active MTI', function() {
          return expect(sut.isPlantMTIActive()).toBeFalsy();
        });
        return it('is virulent', function() {
          return expect(sut.isPathogenVirulent()).toBeTruthy();
        });
      });
      describe('Clear', function() {
        beforeEach(function() {
          return sut.clearBoard();
        });
        it('has no active ETI', function() {
          return expect(sut.isPlantETIActive()).toBeFalsy();
        });
        it('has no active MTI', function() {
          return expect(sut.isPlantMTIActive()).toBeFalsy();
        });
        return it('is virulent', function() {
          return expect(sut.isPathogenVirulent()).toBeTruthy();
        });
      });
      describe('MAMP1', function() {
        beforeEach(function() {
          return sut.toggleCell(TYPE_FEATURE, 1);
        });
        it('has no active ETI', function() {
          return expect(sut.isPlantETIActive()).toBeFalsy();
        });
        it('has no active MTI', function() {
          return expect(sut.isPlantMTIActive()).toBeFalsy();
        });
        it('is virulent', function() {
          return expect(sut.isPathogenVirulent()).toBeTruthy();
        });
        describe('+DETECTOR1', function() {
          beforeEach(function() {
            return sut.toggleCell(TYPE_DETECTOR, 1);
          });
          it('has no active ETI', function() {
            return expect(sut.isPlantETIActive()).toBeFalsy();
          });
          it('has no active MTI', function() {
            return expect(sut.isPlantMTIActive()).toBeFalsy();
          });
          return it('is virulent', function() {
            return expect(sut.isPathogenVirulent()).toBeTruthy();
          });
        });
        return describe('+MAMP2', function() {
          beforeEach(function() {
            return sut.toggleCell(TYPE_FEATURE, 2);
          });
          it('has no active ETI', function() {
            return expect(sut.isPlantETIActive()).toBeFalsy();
          });
          it('has no active MTI', function() {
            return expect(sut.isPlantMTIActive()).toBeFalsy();
          });
          it('is virulent', function() {
            return expect(sut.isPathogenVirulent()).toBeTruthy();
          });
          return describe('+DETECTOR1+DETECTOR2', function() {
            beforeEach(function() {
              sut.toggleCell(TYPE_DETECTOR, 1);
              return sut.toggleCell(TYPE_DETECTOR, 2);
            });
            it('has no active ETI', function() {
              return expect(sut.isPlantETIActive()).toBeFalsy();
            });
            it('has active MTI', function() {
              return expect(sut.isPlantMTIActive()).toBeTruthy();
            });
            it('is not virulent', function() {
              return expect(sut.isPathogenVirulent()).toBeFalsy();
            });
            return describe('+EFFECTOR1a', function() {
              beforeEach(function() {
                return sut.toggleCell(TYPE_EFFECTOR, 1, 0);
              });
              it('has no active ETI', function() {
                return expect(sut.isPlantETIActive()).toBeFalsy();
              });
              it('has inactive MTI', function() {
                return expect(sut.isPlantMTIActive()).toBeFalsy();
              });
              it('is  virulent', function() {
                return expect(sut.isPathogenVirulent()).toBeTruthy();
              });
              return describe('+ALARM1a', function() {
                beforeEach(function() {
                  return sut.toggleCell(TYPE_ALARM, 1, 0);
                });
                it('has active ETI', function() {
                  return expect(sut.isPlantETIActive()).toBeTruthy();
                });
                it('has inactive MTI', function() {
                  return expect(sut.isPlantMTIActive()).toBeFalsy();
                });
                return it('is not virulent', function() {
                  return expect(sut.isPathogenVirulent()).toBeFalsy();
                });
              });
            });
          });
        });
      });
      describe('EFFECTOR2b+ALARM2b', function() {
        beforeEach(function() {
          sut.toggleCell(TYPE_EFFECTOR, 2, 1);
          return sut.toggleCell(TYPE_ALARM, 2, 1);
        });
        it('has active ETI', function() {
          return expect(sut.isPlantETIActive()).toBeTruthy();
        });
        it('has no active MTI', function() {
          return expect(sut.isPlantMTIActive()).toBeFalsy();
        });
        return it('is virulent', function() {
          return expect(sut.isPathogenVirulent()).toBeFalsy();
        });
      });
      return describe('EFFECTOR1a+ALARM1b', function() {
        beforeEach(function() {
          sut.toggleCell(TYPE_EFFECTOR, 1, 0);
          return sut.toggleCell(TYPE_ALARM, 1, 1);
        });
        it('has inactive ETI', function() {
          return expect(sut.isPlantETIActive()).toBeFalsy();
        });
        it('has no active MTI', function() {
          return expect(sut.isPlantMTIActive()).toBeFalsy();
        });
        return it('is virulent', function() {
          return expect(sut.isPathogenVirulent()).toBeTruthy();
        });
      });
    });
  });

}).call(this);
